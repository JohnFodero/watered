name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test Job
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go code is not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run tests
      run: |
        # Run unit tests excluding integration, e2e, and performance directories
        go test -v -race -coverprofile=coverage.out $(go list ./... | grep -v '/tests/integration' | grep -v '/tests/e2e' | grep -v '/tests/performance')

    - name: Run integration tests
      run: go test -v ./tests/integration/...
      continue-on-error: true

    - name: Run e2e tests
      run: go test -v ./tests/e2e/...
      continue-on-error: true

    - name: Run performance tests
      run: go test -v ./tests/performance/...
      continue-on-error: true

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        fail_ci_if_error: false

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html

  # Static Analysis Job
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      run: staticcheck ./...

  # Security Scan Job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install gosec
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest || \
        go install github.com/securecodewarrior/gosec/cmd/gosec@latest || \
        echo "gosec installation failed, will skip security scan"

    - name: Run gosec security scanner
      run: |
        if command -v gosec >/dev/null 2>&1; then
          gosec -fmt sarif -out gosec.sarif ./...
        else
          echo "gosec not available, creating empty SARIF file"
          echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[{"tool":{"driver":{"name":"gosec","version":"unavailable"}},"results":[]}]}' > gosec.sarif
        fi

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec.sarif
      continue-on-error: true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy.sarif'
      continue-on-error: true

  # Build Job
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, static-analysis, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build application
      run: go build -v -o watered ./cmd/server

    - name: Build for multiple platforms
      run: |
        GOOS=linux GOARCH=amd64 go build -o watered-linux-amd64 ./cmd/server
        GOOS=linux GOARCH=arm64 go build -o watered-linux-arm64 ./cmd/server
        GOOS=darwin GOARCH=amd64 go build -o watered-darwin-amd64 ./cmd/server
        GOOS=darwin GOARCH=arm64 go build -o watered-darwin-arm64 ./cmd/server
        GOOS=windows GOARCH=amd64 go build -o watered-windows-amd64.exe ./cmd/server

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: watered-*

  # Docker Build Job
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, static-analysis, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # GitHub Container Registry Push
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for GitHub Registry
      id: meta-github
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push to GitHub Container Registry
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-github.outputs.tags }}
        labels: ${{ steps.meta-github.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max


    # Security Scanning
    - name: Run container security scan on GitHub image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'docker-trivy.sarif'

    - name: Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'docker-trivy.sarif'

  # Deployment Job (for main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, static-analysis, security, build, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "This would typically include:"
        echo "- Updating Docker containers on staging server"
        echo "- Running database migrations"
        echo "- Health checks"
        echo "- Smoke tests"
        echo ""
        echo "📦 Available images for deployment:"
        echo "   - GitHub: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        # In a real deployment, this would connect to your staging environment
        # and deploy the new Docker image

    - name: Run deployment health check
      run: |
        echo "🏥 Running health checks..."
        # Example: curl -f http://staging-server/health || exit 1

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful"
          echo "🐳 Docker images deployed to:"
          echo "   - GitHub Container Registry: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        else
          echo "❌ Deployment failed"
        fi

  # Performance Testing (optional, runs on schedule)
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build application
      run: go build -o watered ./cmd/server

    - name: Start application
      run: |
        ./watered &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
        sleep 5  # Give app time to start

    - name: Install k6 for load testing
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run load tests
      run: |
        # Basic load test
        k6 run --vus 10 --duration 30s - <<EOF
        import http from 'k6/http';
        import { check } from 'k6';
        
        export default function() {
          let response = http.get('http://localhost:8080/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 100ms': (r) => r.timings.duration < 100,
          });
        }
        EOF

    - name: Stop application
      if: always()
      run: |
        if [ ! -z "$APP_PID" ]; then
          kill $APP_PID || true
        fi