name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Run Nancy vulnerability scanner
      run: |
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -deps ./... | nancy sleuth

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  code-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Run staticcheck
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck ./...

    - name: Run ineffassign
      run: |
        go install github.com/gordonklaus/ineffassign@latest
        ineffassign ./...

    - name: Run misspell
      run: |
        go install github.com/client9/misspell/cmd/misspell@latest
        misspell -error .

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t watered:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'watered:security-scan'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Run Docker Scout (if available)
      continue-on-error: true
      run: |
        if command -v docker &> /dev/null && docker scout version &> /dev/null; then
          docker scout cves watered:security-scan
        else
          echo "Docker Scout not available, skipping..."
        fi

  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Build and start application
      run: |
        go build -o watered ./cmd/server
        ./watered &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
        sleep 5

    - name: Check security headers
      run: |
        # Install curl if not available
        sudo apt-get update && sudo apt-get install -y curl
        
        echo "Checking security headers..."
        response=$(curl -I -s http://localhost:8080/health)
        echo "Response headers:"
        echo "$response"
        
        # Basic security header checks
        if echo "$response" | grep -i "x-frame-options" > /dev/null; then
          echo "✅ X-Frame-Options header found"
        else
          echo "⚠️  X-Frame-Options header missing"
        fi
        
        if echo "$response" | grep -i "x-content-type-options" > /dev/null; then
          echo "✅ X-Content-Type-Options header found"
        else
          echo "⚠️  X-Content-Type-Options header missing"
        fi

    - name: Stop application
      if: always()
      run: |
        if [ ! -z "$APP_PID" ]; then
          kill $APP_PID || true
        fi

  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest

    - name: Check licenses
      run: |
        echo "Checking dependency licenses..."
        go-licenses report ./cmd/server --template licenses.tpl > licenses.txt || true
        if [ -f licenses.txt ]; then
          echo "Generated licenses report:"
          cat licenses.txt
        fi

    - name: Upload license report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: license-report
        path: licenses.txt